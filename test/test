#!/usr/bin/env groovy
import groovy.json.JsonSlurper
@Library('sharedPipelineLibraries')

def deployUnit = 'infrastructure'
def modules = 'acm alb dynamo ecs-cluster postgres-database redis-elasticache'

// Manifest
def manifestRepo = 'git@gilligan.pearsondev.com:transcend-mvp/pipeline-manifest.git'
def manifestBranch = 'master'
def manifestName = "${deployUnit}-manifest.json"

// Infrastructure
def infrastructureRepo = 'git@gilligan.pearsondev.com:transcend-mvp/live-infrastructure.git'
def infrastructureBranch = 'master'

// Git
def gitCryptKeyCred = 'git-crypt-transcend-mvp.key'

// AWS
def awsRegion = 'us-east-1'

// Tools
def buildToolsContainer = 'build-tools:4.0.23'



def prodAccepters = [ 'UMADDRA', 'ULUERJE', 'VSAKHNA', 'UVEERUM', 'UCECICO', 'USOBAJA' ]
def emailList = [ 'io-devops@pearson.com', 'jason.sobanski@pearson.com', 'cole.cecil@pearson.com', 'rob.nielsen@pearson.com', 'wade.anderson@pearson.com' ]

def moduleVersion = '' // for promotion to master pipeline
def masterPipelineFolder = 'transcend/master_deployment_pipelines'

def revision = "1.0.${BUILD_NUMBER}-develop"

currentBuild.displayName=revision

// Environments
// smk, dev

pipeline {
  agent none
  parameters {
    string(name: 'MANIFEST_TYPE',   defaultValue: '', description: 'Manifest Type Identifier')
    string(name: 'MANIFEST_KEY',    defaultValue: '', description: 'Manifest Key Name')
    string(name: 'MANIFEST_VALUE',  defaultValue: '', description: 'Manifest Key Value')
    string(name: 'MULTIPLE_INPUT',  defaultValue: '', description: 'Single line JSON as string')
  }
  options {
    timestamps()
    ansiColor('xterm')
    skipDefaultCheckout()
    preserveStashes(buildCount: 15)
    buildDiscarder(logRotator(numToKeepStr: '15'))
    timeout(time: 4, unit: 'DAYS')
  }
  stages {
    stage('Create Manifest') {
     agent {
        docker {
          // Reuse the workspace on the agent defined at top-level of
          // Pipeline but run inside a container
          // https://jenkins.io/doc/book/pipeline/syntax/#common-options
          reuseNode true
          image 'prsn/build-tools:4.0.23'
          //Only required if the container specifies an entrypoint, as Jenkins has a bug
          args "--entrypoint=''"
          registryUrl 'https://731417772907.dkr.ecr.us-east-1.amazonaws.com'
          // The `ecr:us-east-1` part of the credential is what allows
          // Jenkins to log into ECR using the Amazon ECR plugin
          // Amazon ECR Jenkins plugin: https://plugins.jenkins.io/amazon-ecr
          registryCredentialsId 'ecr:us-east-1:jenkins-aws-shared-ecr-731417772907'
        } // docker
      } // agent

      options {
        lock resource: "transcend-manifest"
      }
      environment {
        GIT_SSH_KEY = credentials('hal9000_ssh_file')
      }
      steps {
        script {
          // Generate the description to detail changes
          message = ''
          if (env.MULTIPLE_INPUT?.trim()) {
            message = ''
            def list = new JsonSlurper().parseText( env.MULTIPLE_INPUT?.trim() )
            list.each {type, hash -> message += "${type} => <br>" ; hash.each {key, value -> message += "  ${key}:${value} <br>"}}
            currentBuild.description = message
          }
          if (env.MANIFEST_TYPE?.trim()) {
            currentBuild.description = message += "${MANIFEST_TYPE} => <br>  ${MANIFEST_KEY}:${MANIFEST_VALUE} <br>"
          }
        }
        git(
          changelog: false,
          poll: false,
          credentialsId: 'hal9000_ssh',
          url: manifestRepo,
          branch: manifestBranch
        )
        sh """\
          #!/bin/bash -le
          eval "\$(chef shell-init bash)"
          export GIT_SSH_COMMAND="/usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i '${GIT_SSH_KEY}'"

          curl https://s3.amazonaws.com/pearsonyumrepo/cdos/v3/update_manifest.rb | ruby -- '' --branch '${manifestBranch}' --pipeline '${revision}' --manifestName '${manifestName}' --multi '${MULTIPLE_INPUT}' --type '${MANIFEST_TYPE}' --key '${MANIFEST_KEY}' --value '${MANIFEST_VALUE}'
        """.stripIndent()
        stash name:'manifest', includes: manifestName
        archiveArtifacts manifestName
      }
      post {
        cleanup {
          deleteDir() // clean up workspace
        }
      }
    }

    stage('Deploy to smk') {
      agent {
        label 'docker'
      }
      environment {
        ENVIRONMENT = 'smk'
        AWS_REGION = "${awsRegion}"
        AWS_DEFAULT_REGION = "${awsRegion}"
        GIT_SSH_KEY = credentials('hal9000_ssh_file')
       
      }
      steps {
        milestone(1)
       withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                          credentialsId: "jenkins-aws-shared-ecr-731417772907"]]) {

          // prior to aws-cli v1.17.10 use (removed as of v2.0):
          //  set +x # Do not display the credentials from the ecr command to the job output
          //  eval \$(aws ecr get-login --no-include-email --region us-east-1)

          sh """\
               aws --version
               aws ecr get-login-password | docker login -u=AWS --password-stdin https://731417772907.dkr.ecr.us-east-1.amazonaws.com
               docker pull 731417772907.dkr.ecr.us-east-1.amazonaws.com/prsn/${buildToolsContainer}

               docker images
          """.stripIndent().trim()
        } // nonprod credentials
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-apollo-nonprod-055572429374'],
          file(credentialsId: gitCryptKeyCred, variable: 'GIT_CRYPT_KEY')
        ]) {
          git(
            changelog: false,
            poll: false,
            credentialsId: 'hal9000_ssh',
            url: infrastructureRepo,
            branch: infrastructureBranch
          )
          unstash name: 'manifest'
          script {
            def props = readJSON file: manifestName
            currentBuild.displayName = props['pipeline']
            revision = props['pipeline']
          }
          lock(resource: "transcend-mvp-${env.ENVIRONMENT}") {
            sh """\
              #!/bin/bash -le

              umask 077
              git-crypt unlock "${GIT_CRYPT_KEY}"

              
              chmod 755 ./deploy.sh
              docker run --rm \\
                -v "\${WORKSPACE}":/workspace \\
                -v "\${GIT_SSH_KEY}":/git_key_file \\
                -u \$(id -u):\$(id -g) \\
                -w /workspace \\
                -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \\
                -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \\
                -e AWS_SESSION_TOKEN=\${AWS_SESSION_TOKEN} \\
                -e AWS_REGION=\${AWS_REGION} \\
                -e AWS_DEFAULT_REGION=\${AWS_REGION} \\
                -e GIT_SSH_COMMAND="/usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /git_key_file" \\
                --entrypoint=/bin/bash \\
                731417772907.dkr.ecr.us-east-1.amazonaws.com/prsn/${buildToolsContainer} \\
                -c "curl https://s3.amazonaws.com/pearsonyumrepo/cdos/v3/terraform_module_update.rb | ruby -- '' --environment '${ENVIRONMENT}' --branch ${infrastructureBranch} --manifest '${manifestName}' && \\
                curl https://s3.amazonaws.com/pearsonyumrepo/cdos/v3/general_tfvars_updater.rb  | ruby -- '' --skipPipelineValue --skipConfigCommitHash --environment '${ENVIRONMENT}' --branch '${infrastructureBranch}' --manifest '${manifestName}' && \\
               /workspace/deploy.sh ${ENVIRONMENT} ${deployUnit} "
            """
          }
        }
      }
      post {
        success {
          slackSend( 
            channel: 'transcend-deployments', 
            message: "${env.JOB_NAME} - ${env.BUILD_NUMBER} - Deploy to SMK - Success - (<${env.BUILD_URL}|Open>)", 
            color: '#00ba00', 
            teamDomain: 'aidevops', 
            tokenCredentialId: 'AIDEVOPS_SLACK_INTEGRATION_TOKEN'
          )
        }
        cleanup {
          deleteDir() // clean up workspace
        }
      }
    }

    stage('Deploy to dev') {
      input {
        message "Deploy to dev?"
      }
      agent {
        label 'docker'
      }
      environment {
        ENVIRONMENT = 'dev'
        AWS_REGION = "${awsRegion}"
        AWS_DEFAULT_REGION = "${awsRegion}"
        GIT_SSH_KEY = credentials('hal9000_ssh_file')
       
      }
      steps {
        milestone(2)
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                          credentialsId: "jenkins-aws-shared-ecr-731417772907"]]) {

          // prior to aws-cli v1.17.10 use (removed as of v2.0):
          //  set +x # Do not display the credentials from the ecr command to the job output
          //  eval \$(aws ecr get-login --no-include-email --region us-east-1)

          sh """\
               aws --version
               aws ecr get-login-password | docker login -u=AWS --password-stdin https://731417772907.dkr.ecr.us-east-1.amazonaws.com
               docker pull 731417772907.dkr.ecr.us-east-1.amazonaws.com/prsn/${buildToolsContainer}

               
          """.stripIndent().trim()
        } // nonprod credentials
        withCredentials([
          [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'jenkins-aws-apollo-nonprod-055572429374'],
          file(credentialsId: gitCryptKeyCred, variable: 'GIT_CRYPT_KEY')
        ]) {
          git(
            changelog: false,
            poll: false,
            credentialsId: 'hal9000_ssh',
            url: infrastructureRepo,
            branch: infrastructureBranch
          )
          unstash name: 'manifest'
          script {
            def props = readJSON file: manifestName
            currentBuild.displayName = props['pipeline']
            revision = props['pipeline']
          }
          lock(resource: "transcend-mvp-${env.ENVIRONMENT}") {
            sh """\
              #!/bin/bash -le

              umask 077
              git-crypt unlock "${GIT_CRYPT_KEY}"
              
              chmod 755 ./deploy.sh
              docker run --rm \\
                -v "\${WORKSPACE}":/workspace \\
                -v "\${GIT_SSH_KEY}":/git_key_file \\
                -u \$(id -u):\$(id -g) \\
                -w /workspace \\
                -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \\
                -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \\
                -e AWS_SESSION_TOKEN=\${AWS_SESSION_TOKEN} \\
                -e AWS_REGION=\${AWS_REGION} \\
                -e AWS_DEFAULT_REGION=\${AWS_REGION} \\
                -e GIT_SSH_COMMAND="/usr/bin/ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /git_key_file" \\
                --entrypoint=/bin/bash \\
                731417772907.dkr.ecr.us-east-1.amazonaws.com/prsn/${buildToolsContainer} \\
                -c "curl https://s3.amazonaws.com/pearsonyumrepo/cdos/v3/terraform_module_update.rb | ruby -- '' --environment '${ENVIRONMENT}' --branch ${infrastructureBranch} --manifest '${manifestName}' && \\
                curl https://s3.amazonaws.com/pearsonyumrepo/cdos/v3/general_tfvars_updater.rb  | ruby -- '' --skipPipelineValue --skipConfigCommitHash --environment '${ENVIRONMENT}' --branch '${infrastructureBranch}' --manifest '${manifestName}' && \\
              /workspace/deploy.sh ${ENVIRONMENT} ${deployUnit}"
            """
          }
        }
      }
      post {
        success {
          slackSend( 
            channel: 'transcend-deployments', 
            message: "${env.JOB_NAME} - ${env.BUILD_NUMBER} - Deploy to DEV - Success - (<${env.BUILD_URL}|Open>)", 
            color: '#00ba00', 
            teamDomain: 'aidevops', 
            tokenCredentialId: 'AIDEVOPS_SLACK_INTEGRATION_TOKEN'
          )
        }
        cleanup {
          deleteDir() // clean up workspace
        }
      }
    }

    stage('Promote Module Version to Master Pipeline') {
      input {
        message "Promote current module version to Master Deployment Pipeline?"
      }
      agent {
        label 'docker'
      }
      steps {
        milestone(3)
        unstash name: 'manifest'
        script {
          def props = readJSON file: manifestName
          currentBuild.displayName = props['pipeline']
          revision = props['pipeline']

          moduleVersion = props['infrastructure']['transcend-mvp']
        }

        echo "Promoting module version: ${moduleVersion}"

        build(
          job: "${masterPipelineFolder}/${env.JOB_BASE_NAME}",
          parameters: [
            string(name: 'MANIFEST_TYPE', value: 'infrastructure'),
            string(name: 'MANIFEST_KEY', value: 'transcend-mvp'),
            string(name: 'MANIFEST_VALUE', value: moduleVersion),
            string(name: 'MULTIPLE_INPUT', value:''),
            booleanParam(name: 'TRIGGER_DOWNSTREAM', value: true)
          ],
          wait: false
        )
      }
    }
  }
  post {
    failure {
      slackSend(
        channel: 'transcend-deployments', 
        message: "${env.JOB_NAME} - ${env.BUILD_NUMBER} - Failed - (<${env.BUILD_URL}|Open>)", 
        color: "danger",
        teamDomain: 'aidevops', 
        tokenCredentialId: "AIDEVOPS_SLACK_INTEGRATION_TOKEN"
      )
    }
  }
}
